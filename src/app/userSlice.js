import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { initialState } from './users_states';

export const usersAsync = createAsyncThunk(
    'users/fetchUser',
    async () => {
      const response =  await fetch("https://jsonplaceholder.typicode.com/users");
      const data =  await response.json();
      console.log("Get async reducer users");
      console.log(data);
      return data;
    }
);

export const userSlice = createSlice({
    name: 'users',
    initialState,
    reducers: {
      loggedInUser: (state, action) => {
        console.log("Get redux toolkit loggedInUser")
        console.log(action.payload)
        state.isLoggedin = true;
        state.loggedInUser = action.payload;
        localStorage.setItem("isAuth", state.isLoggedin);
        localStorage.setItem("loggedUser", JSON.stringify(state.loggedInUser));
      }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(usersAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.users = action.payload;
        });
    },
});

export const { loggedInUser } = userSlice.actions;
export const getLoggedInUser = (state) => state.users.loggedInUser;
export const isAuthenticate = (state) => state.users.isLoggedin;
export default userSlice.reducer;